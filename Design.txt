Back-end: We used an SQL, flask, and python backend. For SQL, I created a table, called todo, which has the fields todoid (which keeps track of each task), date (to keep track of the date and time the task was created), priority (to keep track of the priority), grouping (to keep track kof the category, with 1 being today, 2 being tomorrow, and 3 being longterm), task (to keep track of the text of the task), and isdone (with a 1 being not yet done and a 2 being done). In app.py, there are four routes: 1.) /index, which is called whenever the website is originally loaded, when "ToDo" is clicked in the navigation bar, and when "Zach's ToDo List" is clicked in the nav bar. Essentially, it is the home page. It loads the tasks from the database and orders them by category, priority, and datetime, putting them into a variable called rows. If there is nothing in the database yet, then no category is displayed. It takes care of marking within rows when a category should appear by adding a key-value pair with key of "change" to each row and designating the category that should appear by updating change. I.E. when "today" should appear above a task, that row updates change to 1. 2.) /delete, which is called whenever a task is marked as complete, as per checking it off. The delete method updates the database so that the task is marked as done. I wanted to get practice with asynchronous functions, so I used that to implement the delete method. Therefore, rather than rendering index again inside of the delete route, the delete method returns json message of "okay" when it is called, and then when this message is received the page is reloaded on the front end. 3.) /create, which is called whenever a task is created, as per filling out the form at the bottom and clicking add task. This route takes care of handling errors (i.e. if any of the inputs are blank), through rendering the apology template. It also updates the database and, similar to index, configures the variable "rows" so that the appropriate order of tasks is maintained and the appropriate categories are shown 4.) /completed, which is called whenever the "completed" navigation link is clicked. This route orders the tasks from last to first so that I can easily see the tasks that I've just completed. There is also helpers.py, which contains the "apology" function that renders error messages

Front-end:

There are four templates:
    1.) layout.html, which contains everything we want shared by all of the pages, including the navigation bar, the bootstrap links and the CSS style sheet
    2.) apology.html, which has the code to render the cat picture and apology error message
    3.) completed.html, which uses jinja to create a table with the completed tasks
    4.) index.html, which renders the todo page. It has jinja code to render all of the tasks in the right order with the categories and priorities. It uses the "change" key within the rows inputted from the backend to fill in the category, and there are different css classes that are rendered for priority based on the priority key from rows. The form is also implemented at the bottom that allows you to create a task. Additionally, there are two chunks of javascript code at the bottom, which do the following:
        1.) The first snippet is the asynchronous function that works in harmony with the delete route. I wanted to get practice with asynchronous functions
        2.) The second chunk implements the timer. The most confusing part of this code probably has to do with the interval id. In order to allow multiple timers to run at the same time, I save the id of the interval each time it runs in a dictionary so that intervals can be cleared without affecting the others.

    In my static files, I just have my CSS, but I utilized some cool features including changing the color of the start timer button when it's hovered over, changing the priority squares to checkmarks when they are clicked, and generally styling the whole site with custom styling and a color pallete that goes well together, centered around pink to cheer me up
